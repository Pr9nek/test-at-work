import { useEffect } from "react";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useUserStore } from "../../store/users";
import styles from "./UserForm.module.css";

type ApiUser = {
  id: number;
  name: string;
  username: string;
  email: string;
  phone: string;
  address: { city: string };
  company: { name: string };
};

const schema = z.object({
  name: z
    .string({
      message: "–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º.",
    })
    .nonempty("–ü–æ–ª–µ '–ò–º—è' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.")
    .min(2, "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤.")
    .max(64, "–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 64 —Å–∏–º–≤–æ–ª–∞."),

  username: z
    .string({
      message: "–ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º.",
    })
    .nonempty("–ü–æ–ª–µ '–ù–∏–∫–Ω–µ–π–º' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.")
    .min(2, "–ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤.")
    .max(64, "–ù–∏–∫–Ω–µ–π–º –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 64 —Å–∏–º–≤–æ–ª–∞."),

  email: z
    .string({
      message: "–ü–æ—á—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º.",
    })
    .nonempty("–ü–æ–ª–µ '–ü–æ—á—Ç–∞' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.")
    .email("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã."),

  city: z
    .string({
      // üí° –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º 'message'
      message: "–ì–æ—Ä–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º.",
    })
    .nonempty("–ü–æ–ª–µ '–ì–æ—Ä–æ–¥' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.")
    .min(2, "–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤.")
    .max(64, "–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 64 —Å–∏–º–≤–æ–ª–∞."),
  phone: z
    .string({
      message: "–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π (—Ç–µ–∫—Å—Ç–æ–º).",
    })
    .nonempty("–ü–æ–ª–µ '–¢–µ–ª–µ—Ñ–æ–Ω' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.")
    .refine((val) => /^\d+$/.test(val.replace(/\D/g, "")), {
      message: "–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã",
    }),
  companyName: z
    .string({
      message: "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º.",
    })
    .nonempty("–ü–æ–ª–µ '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.")
    .min(2, "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤.")
    .max(64, "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 64 —Å–∏–º–≤–æ–ª–∞."),
});

type FormValues = z.infer<typeof schema>;

type UserFormProps = {
  user: ApiUser;
  onSuccess: () => void;
};

export default function UserForm({ user, onSuccess }: UserFormProps) {
  const { upsertEditedUser } = useUserStore();

  const {
    register,
    handleSubmit,
    formState: { errors },
    reset,
  } = useForm<FormValues>({
    resolver: zodResolver(schema),
    mode: "onTouched",
  });

  useEffect(() => {
    reset({
      name: user.name,
      username: user.username,
      email: user.email,
      city: user.address?.city ?? "",
      phone: user.phone,
      companyName: user.company?.name ?? "",
    });
  }, [user.id, reset]);

  const onSubmit = (values: FormValues) => {
    upsertEditedUser({
      id: user.id,
      name: values.name,
      username: values.username,
      email: values.email,
      phone: values.phone,
      address: { city: values.city },
      company: { name: values.companyName },
    });
    onSuccess();
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className={styles.form}>
      <div className={styles.formField}>
        <label className={styles.label}>–ò–º—è</label>
        <input
          className={`${styles.input} ${errors.name ? styles.error : ""}`}
          {...register("name")}
          placeholder="–ò–≤–∞–Ω"
        />
        {errors.name && (
          <span className={styles.errorMessage}>{errors.name.message}</span>
        )}
      </div>

      <div className={styles.formField}>
        <label className={styles.label}>–ù–∏–∫–Ω–µ–π–º</label>
        <input
          className={`${styles.input} ${errors.username ? styles.error : ""}`}
          {...register("username")}
          placeholder="ivan1234"
        />
        {errors.username && (
          <span className={styles.errorMessage}>{errors.username.message}</span>
        )}
      </div>

      <div className={styles.formField}>
        <label className={styles.label}>–ü–æ—á—Ç–∞</label>
        <input
          type="email"
          className={`${styles.input} ${errors.email ? styles.error : ""}`}
          {...register("email")}
          placeholder="ivan1234@mail.ru"
        />
        {errors.email && (
          <span className={styles.errorMessage}>{errors.email.message}</span>
        )}
      </div>

      <div className={styles.formField}>
        <label className={styles.label}>–ì–æ—Ä–æ–¥</label>
        <input
          className={`${styles.input} ${errors.city ? styles.error : ""}`}
          {...register("city")}
          placeholder="–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
        />
        {errors.city && (
          <span className={styles.errorMessage}>{errors.city.message}</span>
        )}
      </div>

      <div className={styles.formField}>
        <label className={styles.label}>–¢–µ–ª–µ—Ñ–æ–Ω</label>
        <input
          className={`${styles.input} ${errors.phone ? styles.error : ""}`}
          {...register("phone")}
          placeholder="8 (999) 111-23-23"
          onKeyDown={(e) => {
            if (!/[0-9]|\b/.test(e.key)) e.preventDefault();
          }}
        />
        {errors.phone && (
          <span className={styles.errorMessage}>{errors.phone.message}</span>
        )}
      </div>

      <div className={styles.formField}>
        <label className={styles.label}>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏</label>
        <input
          className={`${styles.input} ${
            errors.companyName ? styles.error : ""
          }`}
          {...register("companyName")}
          placeholder="AT-WORK"
        />
        {errors.companyName && (
          <span className={styles.errorMessage}>
            {errors.companyName.message}
          </span>
        )}
      </div>

      <button type="submit" className={styles.saveButton}>
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
      </button>
    </form>
  );
}
